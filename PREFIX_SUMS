// smaller part of array is known as subarray
// prefix sum
// time o(n^2)
#include <iostream>
using namespace std;

int largestsubarraysum(int arr[], int n)
{
    //prefix sum of arrays
    int prefix[100] = {0};
    prefix[0]=arr[0];
    for(int i=1;i<n;i++)
    {
        prefix[i]=prefix[i-1]+arr[i];
    }


    int largest_sum = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = i; j < n; j++)
        {
            // cout<<"("<<i<<", "<<j <<"),";

            int subarraysum = i>0 ? prefix[j]-prefix[i-1] : prefix[j];
            largest_sum = max(largest_sum, subarraysum);
        }
        // cout<<endl;
    }
    return largest_sum;
}

// sum of largest sub array and
// prefix sum  approch

int main()
{
    int arr[] = {-2, 3, 4, -1, 5, -12, 6, 1, 3};
    int n = sizeof(arr) / sizeof(int);

    // printsubarray(arr,n);
    cout << largestsubarraysum(arr, n);
    return 0;
}
